Answers to exercise 2:

1) Set integer before memory block to 42.

2) p --> address of first value of array
  *p --> content of p => first value of array
  &p --> address of first value of array

3) *(p+1) --> content of *(p+1) => second value of array (== p[1])
     *p+1 --> adds "sizeof(typeof(*p))" to *p

4) q[0] --> int which equals address of memory block (8 bytes) before p e.g. 6421944
   *(q+10) --> the size of *q is 4 bytes, so is incremented in steps of 4, i.e. 10*4. Whereas p in 3) is 8 bytes and is incremented in steps of 8. so if q is incremented by 10 it is as if we increment p by 5, so *(q+10) has the content of the 5th element of p == p[4].
   *(q+11) --> refering to the same argument as in the point above we can say that incrementing q by 11 is the same as incrementing q by 5.5, which is not defined in the array p and just contains 0. All odd incrementations of q (at least in the range of 0 to 20) containt 0.

5) M is a pointer to an array i.e. pointer to a pointer

6) M --> address of the first pointer of M
   *M --> pointer to an array of integers
   **M --> content of first element of first array of M (== 0)
   M[1][3] --> content of 4th element of 2nd array of M (== 8)
   *(M[0]+1) --> content of 2nd element of 1st array of M (== 1)
   *(*(M+1)+3) --> content of 4th element of 2nd array of M (== 8)

7) No. They are not next to each other. Though I noticed they are always 32 bytes apart from each other.
